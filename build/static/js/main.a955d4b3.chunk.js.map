{"version":3,"sources":["App.js","index.js"],"names":["App","useForm","errors","register","handleSubmit","useState","labelValue","setLabelValue","blnShowProgress","setBlnShowProgress","algo","setAlgo","methodList","setMethodList","additionalData","setAdditionalData","axios","get","then","response","console","log","data","length","displayname","className","style","margin","padding","AppBar","position","Toolbar","Typography","variant","onSubmit","post","query","inputfield","res","group","JSON","parse","error","FormControl","minWidth","InputLabel","id","Select","name","ref","labelId","value","onChange","event","target","map","item","MenuItem","method","width","TextField","inputRef","required","label","placeholder","fullWidth","InputLabelProps","shrink","Button","color","type","CircularProgress","height","maxWidth","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","key","probability","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.a955d4b3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport { Button } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport axios from \"axios\";\nimport { useForm } from \"react-hook-form\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst App = () => {\n  const { errors, register, handleSubmit } = useForm();\n  const [labelValue, setLabelValue] = useState(\"\");\n  const [blnShowProgress, setBlnShowProgress] = useState(false);\n  const [algo, setAlgo] = useState(\"\");\n  const [methodList, setMethodList] = useState(null);\n  const [additionalData, setAdditionalData] = useState(\"\");\n  // JSON.parse( `\n  //[{\"group\": \"grp_0\", \"probability\": 1.0000100135803223}, {\"group\": \"grp_24\", \"probability\": 1.0000003385357559e-05}, {\"group\": \"grp_9\", \"probability\": 1.0000003385357559e-05}]\n  // `)\n\n  if (!methodList) {\n    axios.get(\"/getPredictMethods\").then((response) => {\n      console.log(\"Method list received\", response.data);\n      setMethodList(response.data);\n    });\n  }\n\n  const handleChange = (event) => {\n    setAlgo(event.target.value);\n  };\n\n  const onSubmit = (data) => {\n    console.log(data);\n    setLabelValue(\"\");\n    setAdditionalData(\"\");\n    setBlnShowProgress(true);\n    console.log(\"dropdown selected\", algo);\n    axios.post(\"/\" + algo, { query: data.inputfield }).then(\n      (res) => {\n        console.log(\"response\", res);\n        if (res.data) {\n          setLabelValue(res.data.group);\n          console.log('res.data ', res.data);\n          if (res.data.additionalData) {\n            setAdditionalData(JSON.parse(res.data.additionalData));\n          }\n        }\n        setBlnShowProgress(false);\n      },\n      (error) => {\n        console.log(\"error\", error);\n        setBlnShowProgress(false);\n      }\n    );\n  };\n\n  const gridHtml = () => {\n    if (additionalData) {\n      return (\n        <TableContainer>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Group</TableCell>\n                <TableCell align=\"center\">Probability</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {additionalData.map((row) => (\n                <TableRow key={row.group}>\n                  <TableCell align=\"center\">{row.group}</TableCell>\n                  <TableCell align=\"center\">{row.probability}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      );\n    }\n    return null;\n  };\n\n  if (!algo && methodList && methodList.length > 0) {\n    setAlgo(methodList[0].displayname);\n  }\n\n  const methodListHtml = () => {\n    if (!methodList) {\n      return null;\n    }\n    return methodList.map((item) => (\n      <MenuItem value={item.method}>{item.displayname} </MenuItem>\n    ));\n    //return null;\n  };\n\n  const progressBar = () => {\n    if (!blnShowProgress) {\n      return null;\n    }\n    return <CircularProgress color=\"secondary\" />;\n  };\n  return (\n    <div className=\"App\" style={{ margin: 0, padding: 0 }}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">NLP APP</Typography>\n        </Toolbar>\n      </AppBar>\n      <p>\n        Enter issue description and app will tell you which group shall resolve\n        it\n      </p>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormControl style={{ minWidth: 220 }}>\n          <InputLabel id=\"demo-controlled-open-select-label\">\n            Select Algorithm\n          </InputLabel>\n          <Select\n            name=\"algo\"\n            ref={register}\n            labelId=\"demo-customized-select-label\"\n            id=\"demo-customized-select\"\n            value={algo}\n            onChange={handleChange}\n          >\n            {methodListHtml()}\n          </Select>\n        </FormControl>\n        <br/>\n\n        <FormControl style={{width: 500}}>\n          <TextField\n            inputRef={register({ required: true })} // pattern: /^[A-Za-z0-9\\s]+$/i\n            name=\"inputfield\"\n            id=\"standard-full-width\"\n            label=\"Issue Description\"\n            style={{ margin: 8 }}\n            placeholder=\"Enter Description here\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          {errors.inputfield && \"Input cannot be empty\"}\n        </FormControl>\n\n        <br />\n        <Button color=\"primary\" type=\"submit\">\n          Get Group\n        </Button>\n        <br />\n        {progressBar()}\n      </form>\n\n      <p>{labelValue}</p>\n      <div style={{ height: 400, maxWidth: 500, margin: \"auto\" }}>\n        {gridHtml()}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n  rootElement\n);\n"],"sourceRoot":""}